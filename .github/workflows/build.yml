name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build icons
        run: yarn build:icons

      - name: Build app
        run: yarn make
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            out/make/**/*.zip
            out/make/**/*.dmg
            out/make/**/*.exe



  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-artifacts
          path: artifacts/macos
      
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-artifacts
          path: artifacts/windows
        
      - name: Upload to release
        if: steps.semantic.outputs.new_release_published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find all files matching the expected extensions in both artifact directories.
          files=$(find artifacts/macos artifacts/windows -type f \( -iname '*.exe' -o -iname '*.zip' -o -iname '*.dmg' \))
          for file in $files; do
      echo "Uploading $file to release v${{ steps.semantic.outputs.new_release_version }}"
      gh release upload "v${{ steps.semantic.outputs.new_release_version }}" "$file" --clobber
    done

