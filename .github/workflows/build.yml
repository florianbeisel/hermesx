name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  preflight:
    name: Preflight
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

        # Lint step using ESLint.
      - name: Lint code with ESLint
        run: yarn lint

      - name: Format check with Prettier
        run: yarn format:check

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: preflight
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Run semantic-release (using cycjimmy's action as an example)
      - name: Run semantic-release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 2. Build Job: Build for Windows and macOS.
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: release
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
    steps:
      - name: Checkout code (with updated version)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Pull latest changes (so that the version bump is present)
      - name: Pull latest changes
        run: git pull

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build icons
        run: yarn build:icons

      - name: Build app
        run: yarn make
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload artifacts from this build.
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          # Adjust these globs to match your electron-forge output.
          path: |
            out/make/**/*.zip
            out/make/**/*.dmg
            out/make/**/*.exe
            out/make/**/*latest*.yml
            out/make/**/*latest-mac*.yml

  # 3. Upload Job: Download all artifacts and, if a release was published, attach them to the GitHub release.
  upload:
    name: Upload to GitHub Release
    runs-on: ubuntu-latest
    needs:
      - build
      - release
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download macOS artifacts (from the build job).
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-artifacts
          path: artifacts/macos

      # Download Windows artifacts.
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-artifacts
          path: artifacts/windows

      - name: List downloaded artifacts
        run: |
          echo "Artifacts from macOS:"
          find artifacts/macos -type f
          echo "Artifacts from Windows:"
          find artifacts/windows -type f

      # Ensure GitHub CLI is installed.
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      # Only run this step if semantic-release published a release.
      - name: Upload artifacts to GitHub Release
        if: needs.release.outputs.new_release_published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Release version: v${{ needs.release.outputs.new_release_version }}"
          # Use find to search both directories and include yml files
          find artifacts -type f \( -iname '*.zip' -o -iname '*.dmg' -o -iname '*.exe' -o -iname '*latest*.yml' -o -iname '*latest-mac*.yml' \) | while IFS= read -r file; do
            echo "Uploading \"$file\" to release v${{ needs.release.outputs.new_release_version }}"
            gh release upload "v${{ needs.release.outputs.new_release_version }}" "$file" --clobber
          done
